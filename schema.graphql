type Proposal @entity {
  id: ID!
  project: Project! @index(unique: false)
  proposal: Int!
  start: BigInt! @index(unique: false)
  end: BigInt! @index(unique: false)
  author: CrossChainAccount!
  privacy: Privacy!
  format: VotingFormat!
  optioncount: Int!
  frequency: BigInt
  finalized: Boolean!
  votes: [String]!
  pubvote: String
  blacklisted: Boolean
  created: Int!
  updated: Int!
  updates: Int!
  data: String!
  title: String
  description: String
  options: [String]
  workspaces: [Workspace]!
  snapshots: [String]
}

type Privacy @jsonField {
  opaque: Int
  rank: String
  private: String
  public: String
  mixed: String
}

enum VotingFormat {
  SingleChoice
  SplitVote
}

enum Protocol {
  Substrate
  Solidity
}

type CrossChainAccount @entity {
  id: ID!
  protocol: Protocol!
  projects: [Project]! @derivedFrom(field: "owner")
}

type AccountProjectAdmin @entity {
  id: ID!
  account: CrossChainAccount!
  project: Project!
}

type AccountProjectMaintainer @entity {
  id: ID!
  account: CrossChainAccount!
  project: Project!
}

type AccountProjectProposer @entity {
  id: ID!
  account: CrossChainAccount!
  project: Project!
}

type Project @entity {
  id: ID!
  owner: CrossChainAccount! @index(unique: false)
  updated: Int!
  prop_count: Int!
  prop_updated: Int!
  proposals: [Proposal]! @derivedFrom(field: "project")
  workspaces: [Workspace]!
  enable_proposer: Boolean!
  data: String!
  name: String
  description: String
  icon: String
  banner: String
}

type Strategy @jsonField {
  protocol: String!
  solidity: String
  substrate: String
  param: String
}

type Workspace @jsonField {
  chain: Int
  strategies: [Strategy]!
}
